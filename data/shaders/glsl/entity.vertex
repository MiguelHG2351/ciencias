// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

#include "shaders/vertexVersionCentroidUV.h"

#include "shaders/uniformWorldConstants.h"
#include "shaders/uniformEntityConstants.h"
#include "shaders/uniformPerFrameConstants.h"
#ifdef USE_SKINNING
#include "shaders/uniformAnimationConstants.h"
#endif

attribute mediump vec4 POSITION;
#ifdef USE_SKINNING
#ifdef USE_INT_INDEXING
attribute uint BONEID_0;
#else
attribute float BONEID_0;
#endif
#endif
attribute vec2 TEXCOORD_0;
attribute vec4 NORMAL;

#ifdef COLOR_BASED
	attribute vec4 COLOR;
#endif

varying vec4 light;
varying vec4 fogColor;

#ifdef USE_OVERLAY
varying vec4 overlayColor;
#endif

#ifdef TINTED_ALPHA_TEST
varying float alphaTestMultiplier;
#endif

#if defined(USE_COLOR_MASK) || defined(ITEM_IN_HAND) || defined(COLOR_SECOND_TEXTURE)
varying vec4 changeColor;
#endif

#ifdef GLINT
	varying vec2 layer1UV;
	varying vec2 layer2UV;
    varying vec4 tileLightColor;
	varying vec4 glintColor;
#endif

const float AMBIENT = 0.45;

const float XFAC = -0.1;
const float ZFAC = 0.1;

float lightIntensity() {
#ifdef FANCY
#ifdef USE_SKINNING
#ifdef NO_DYNAMIC_ARRAY_ACCESS
	vec3 N;
	if ( BONEID_0 == 0.0 )
		N = normalize( BONES[0] * NORMAL ).xyz;
	else if ( BONEID_0 == 1.0 )
		N = normalize( BONES[1] * NORMAL ).xyz;
	else if ( BONEID_0 == 2.0 )
		N = normalize( BONES[2] * NORMAL ).xyz;
	else if ( BONEID_0 == 3.0 )
		N = normalize( BONES[3] * NORMAL ).xyz;
	else if ( BONEID_0 == 4.0 )
		N = normalize( BONES[4] * NORMAL ).xyz;
	else if ( BONEID_0 == 5.0 )
		N = normalize( BONES[5] * NORMAL ).xyz;
	else if ( BONEID_0 == 6.0 )
		N = normalize( BONES[6] * NORMAL ).xyz;
	else if ( BONEID_0 == 7.0 )
		N = normalize( BONES[7] * NORMAL ).xyz;
#else
    vec3 N = normalize( BONES[int(BONEID_0)] * NORMAL ).xyz;
#endif
#else
    vec3 N = normalize( WORLD * NORMAL ).xyz;
#endif

    N.y *= TILE_LIGHT_COLOR.w; //TILE_LIGHT_COLOR.w contains the direction of the light

    //take care of double sided polygons on materials without culling
#ifdef FLIP_BACKFACES
#ifdef USE_SKINNING
#ifdef NO_DYNAMIC_ARRAY_ACCESS
	vec3 viewDir;
	if ( BONEID_0 == 0.0 )
		viewDir = normalize((BONES[0] * POSITION).xyz);
	else if ( BONEID_0 == 1.0 )
		viewDir = normalize((BONES[1] * POSITION).xyz);
	else if ( BONEID_0 == 2.0 )
		viewDir = normalize((BONES[2] * POSITION).xyz);
	else if ( BONEID_0 == 3.0 )
		viewDir = normalize((BONES[3] * POSITION).xyz);
	else if ( BONEID_0 == 4.0 )
		viewDir = normalize((BONES[4] * POSITION).xyz);
	else if ( BONEID_0 == 5.0 )
		viewDir = normalize((BONES[5] * POSITION).xyz);
	else if ( BONEID_0 == 6.0 )
		viewDir = normalize((BONES[6] * POSITION).xyz);
	else if ( BONEID_0 == 7.0 )
		viewDir = normalize((BONES[7] * POSITION).xyz);
#else
    vec3 viewDir = normalize((BONES[int(BONEID_0)] * POSITION).xyz);
#endif
#else
    vec3 viewDir = normalize((WORLD * POSITION).xyz);
#endif
    if( dot(N, viewDir) > 0.0 )
        N *= -1.0;
#endif

    float yLight = (1.0+N.y) * 0.5;
    return yLight * (1.0-AMBIENT) + N.x*N.x * XFAC + N.z*N.z * ZFAC + AMBIENT;
#else
    return 1.0;
#endif
}

#ifdef GLINT
vec2 calculateLayerUV(float offset, float rotation) {
	vec2 uv = TEXCOORD_0;
	uv -= 0.5;
	float rsin = sin(rotation);
	float rcos = cos(rotation);
	uv = mat2(rcos, -rsin, rsin, rcos) * uv;
	uv.x += offset;
	uv += 0.5;

	return uv * GLINT_UV_SCALE;
}
#endif

void main()
{
#ifdef USE_SKINNING
#ifdef NO_DYNAMIC_ARRAY_ACCESS
	POS4 pos;
	if ( BONEID_0 == 0.0 )
		pos = WORLDVIEWPROJ * BONES[0] * POSITION;
	else if ( BONEID_0 == 1.0 )
		pos = WORLDVIEWPROJ * BONES[1] * POSITION;
	else if ( BONEID_0 == 2.0 )
		pos = WORLDVIEWPROJ * BONES[2] * POSITION;
	else if ( BONEID_0 == 3.0 )
		pos = WORLDVIEWPROJ * BONES[3] * POSITION;
	else if ( BONEID_0 == 4.0 )
		pos = WORLDVIEWPROJ * BONES[4] * POSITION;
	else if ( BONEID_0 == 5.0 )
		pos = WORLDVIEWPROJ * BONES[5] * POSITION;
	else if ( BONEID_0 == 6.0 )
		pos = WORLDVIEWPROJ * BONES[6] * POSITION;
	else if ( BONEID_0 == 7.0 )
		pos = WORLDVIEWPROJ * BONES[7] * POSITION;
#else
    POS4 pos = WORLDVIEWPROJ * BONES[int(BONEID_0)] * POSITION;
#endif
#else
    POS4 pos = WORLDVIEWPROJ * POSITION;
#endif
    gl_Position = pos;

    float L = lightIntensity();

#ifdef USE_OVERLAY
	L += OVERLAY_COLOR.a * 0.35;
    overlayColor = OVERLAY_COLOR;
#endif

#ifdef TINTED_ALPHA_TEST
    alphaTestMultiplier = OVERLAY_COLOR.a;
#endif

#if defined(USE_COLOR_MASK) || defined(ITEM_IN_HAND) || defined(COLOR_SECOND_TEXTURE)
    changeColor = CHANGE_COLOR;
#endif

    light = vec4(vec3(L) * TILE_LIGHT_COLOR.xyz, 1.0);

#ifdef COLOR_BASED
	light *= COLOR;
#endif
    
#ifndef NO_TEXTURE
    uv = TEXCOORD_0;
#endif

#ifdef USE_UV_ANIM
	uv.xy = UV_ANIM.xy + (uv.xy * UV_ANIM.zw);
#endif

#ifdef GLINT
	glintColor = GLINT_COLOR;
	layer1UV = calculateLayerUV(UV_OFFSET.x, UV_ROTATION.x);
	layer2UV = calculateLayerUV(UV_OFFSET.y, UV_ROTATION.y);
    tileLightColor = TILE_LIGHT_COLOR;
#endif

//fog
    fogColor.rgb = FOG_COLOR.rgb;
	fogColor.a = clamp(((pos.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
}